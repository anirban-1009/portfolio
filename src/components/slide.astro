---
import type { ImageMetadata } from "astro";
import Image from "astro/components/Image.astro";

interface Props{
    title: string;
    link: string;
    description: string;
    imagePath: string;
    tags: string[];
}

type TagStyle = {
    tagColor: string;
    tagBg: string;
};

// Define the type for the tagStyles object
type TagStyles = {
    [key: string]: TagStyle; // This allows any string key
};

const {title, link, description, imagePath, tags} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>('/src/images/cover/*.{jpeg,jpg,png,gif,webp}');
if (!images[imagePath]) throw new Error(`"${imagePath}" does not exist in glob: "/images/*.{jpeg,jpg,png,gif}"`);

const tagStyles: TagStyles = {
    "typescript": { "tagBg": "bg-typescript", "tagColor": "dark:text-typescript"},
}

---
<div class="lg:flex justify-center">
    <a href=`work\\${link}` aria-label="working link">
        <div class="bg-white dark:bg-secondary h-auto lg:h-[28rem] rounded-2xl p-4">
            <Image
                alt=`${title}-slide-article`
                src={images[imagePath]()}
                height="135"
                width="308"
                quality={85}
                widths={[240, 540, 720]}
                sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px`}
                loading={"eager"}
                class="rounded-lg w-full"/>
            <!-- Text Section -->
            <div class="flex flex-col p-2 gap-3 my-5">
                <p class="text-xl lg:text-2xl font-sans font-medium">{title}</p>
                <div class="md:flex flex-row gap-4 -ml-4 hidden">
                    {tags.map((tag, index) => (
                        <a
                            class={`h-auto w-fit text-ellipsis px-3 rounded-lg border border-primary text-primary line-clamp-1 whitespace-nowrap${
                                    index === tags.length - 1 ? 'max-w-[100px] overflow-hidden' : ''
                                  }`}
                            href={`tag/${tag}`}
                          >{tag}</a>
                    ))}
                </div>
                <p class="lg:text-lg dark:text-white">{description}</p>
            </div>
        </div>
    </a>
</div>
